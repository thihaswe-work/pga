/* eslint-disable @typescript-eslint/no-explicit-any */
// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  id: string;
  createdAt: number;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Meta = {
  page: number;
  total: number;
  totalPages: number;
};

export type User = Entity<{
  firstName: string;
  lastName: string;
  email: string;
  role: "ADMIN" | "USER";
  teamId: string;
  bio: string;
}>;

export type AuthResponse = {
  jwt: string;
  user: User;
};

export type Team = Entity<{
  name: string;
  description: string;
}>;

export type Discussion = Entity<{
  title: string;
  body: string;
  teamId: string;
  author: User;
}>;

export type Comment = Entity<{
  body: string;
  discussionId: string;
  author: User;
}>;

// types
export type Home = {
  id: number;
  sectionType: string;
  image: string;
  header: string;
  label: string;
  description: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};
export type AboutUs = {
  id: number;
  sectionType: string;
  images?: string[];
  header: string;
  label: string;
  description: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};

export type Banner = {
  id: number;
  image: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};
export type BlogCategory = {
  id: number;
  name: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};
export type Milestone = {
  id: number;
  title: string;
  description: string;
  status: boolean;
  timeline: number;
  link: string;
  image: string;
  icon: string;
  colorCode: string;
  createdAt: string;
  updatedAt: string;
};
export type Blog = {
  id: number;
  title: string;
  blogCategoryId: number;
  description: string;
  image: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};

export type CareerCategory = {
  id: number;
  name: string;
  image: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};

export type RelatedField = {
  id: number;
  name: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};

export type Region = {
  id: number;
  name: string;
  image: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};
export type HiringPost = {
  id: number;
  jobId: string;
  position: string;
  description: string;
  jobClose: string;
  requirement: string;
  responsibility: string;
  benefit: string;
  categoryId: number;
  jobTypeId: number;
  locationId: number;
  regionId: number;
  relatedFieldId: number;
  status: boolean;
  createdAt: string;
  updatedAt: string;
  category: CareerCategory;
  jobType: {
    id: number;
    name: string;
    image: string;
    status: boolean;
    createdAt: string;
    updateAt: string;
  };
  location: {
    id: number;
    name: string;
    status: boolean;
    createdAt: string;
    updatedAt: string;
  };
  region: Region;
  relatedField: RelatedField;
};

export type ContactMessage = {
  id: number;
  name: string;
  email: string;
  message: string;
  applyDate: string;
};

export type RoleAndPermission = {
  id: number;
  role: string;
  systemModules: {
    systemModules1: {
      homePage: {
        edit: boolean;
        view: boolean;
      };
      aboutUs: {
        edit: boolean;
        view: boolean;
      };
    };
    systemModules2: {
      milestones: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
      banners: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
      blogs: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
      careers: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
    };
    systemModules3: {
      jobApplicationForms: {
        reply: boolean;
        view: boolean;
        delete: boolean;
      };
      contactMessages: {
        reply: boolean;
        view: boolean;
        delete: boolean;
      };
    };
    maintenance: {
      rolesAndPermissions: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
      userMaintain: {
        create: boolean;
        edit: boolean;
        view: boolean;
        delete: boolean;
      };
    };
  };
  status: boolean;
  permission: {
    canCreate: boolean;
    canView: boolean;
    canEdit: boolean;
    canDelete: boolean;
    canReply: boolean;
  };
  createdAt: string;
  updatedAt: string;
};

export type UserMaintain = {
  id: number;
  username: string;

  roleId: number;
  email: string;
  password: string;
  status: boolean;
  createdAt: string;
  updatedAt: string;
};

export type JobApplyForm = {
  id: number;
  position: any;
  name: string;
  email: string;
  coverLetter: string;
  resume: any;
  applyDate: string;
};
